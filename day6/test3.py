
#출력하기  : 매게 변수 받아 출력만 하면 됨.
# #아래와 같은 결과가 나올 수있도록 출력  
#이런 함수가 있네, 아직 무슨 값 줄지 몰라, pass주면 하기는 해야겠는데 무슨 값 올지 몰라.
# ---> 주석의 pass로 주면 
# 이름 : 홍길동 직업: 도적 나이 : 20 사는곳: 율도국 키: 180.3
#매게 변수 여러개 가능, 인자가 여러자료형으로 줄 수있음
def show_info(name,job, age, addrs, height): 
    print(" 이름 {0} , 직업: {1}, 나이 : {2}, 사는곳: {3}, 키: {4}".format(name,job,age, addrs, height))
    #pass
show_info("홍길동", "도적", 20, "율도국", 180.3)

#1. 뒤의 순서를 바꾸면 어떻게 되요?#대입순간에 자료형 결정, 두 개 바꿔써도 동작함
# ex name과 job을 바꾸면 이름이 도적이 됨. 

#값을 안 흔들리게 값 정하는 것 >>>> 뭐랑 뭐랑 쌍으로 딕션어리 줄 수 있음>>>>딕션어리를 통해 값을 전달함 
p = {'name' : '홍길동', 'job':'도적','age': 20, 'addrs': "율도국", "height": 180.3}
print(p) 

#show_info(p) #매게변수 값이 안 맞아 에러 , 여러 매게 변수 한꺼번에 astra list 가변인수해서 세트로 다 받아줘. 
#지금은 갯수 적고 dic라보니까 키벨류, 키벨류섞여있는애야. >>> 그래서 **로 표기 
#내가 주는 애 딕션어리야 >>>>>>   **
#**하면 이름 같은 애 찾아요
show_info(**p) #하면 잘못된 값이 전달될 가능성이 적음.
#show_info(**p), 이름 같은 애 묶어주면서 전달해서 로직처리함. 
#>>>>p = {'name' : '홍길동', 'job':'도적','age': 20, 'addrs': "율도국", "height": 180.3} 
#이름 기준으로 밸류 값 하나씩 할당, 이름이 같은 애 위치의 밸류 값 갖음
#하나씩 풀어쓴 것 어팩킹, 그래서 실행 가능 
#만드는 사람과 쓰는 사람 다를 수 있어서 어팩킹함. 
# 별 한개 쓰면 딕션어리 키, 벨류로 되어 있음, 키의 매핑되는 벨류값 찾음,
# 키값만 모아놓은 것 있겠죠, p*그것을 상징해요. 키 목록만 전달됨. 
# * : 키  ---- 설명 
#** : value --- > 설명 


def test(a,b,c):  #a, b, c 있으면 각각 출력해라. 
    print("a: " , a)   
    print("b :" , b)   
    print("c : ", c) 
#이거 그냥 값 쓰면 순서 정확히 맞아야 함. 신경쓰고 싶지 않으면 
test(b = 20, a =10, c = 30)
#이렇게 쓰기 >>> 어떤 게 편한지는 사람마다 다름.

#가변인수 정리할 때 어떻게?
x = [10, 20, 30]  #x는 10,20,30이 들어있음 
def sumvalue(a,b,c): #누적시킬 수 있음, 60이 나오게 쓰기 
    return a+b+c 

print(sumvalue(*x)) #세개 줘야하는데 한개만 줌>>> x면, 그래서 에러 남, 그래서 여러개 가지고 있어, *줌  
#*는 여러 개임을 표시  #전달할 때와 함수 정의 할 때도 사용가능. 리스트, 튜플은 한개 

#가변인수로 함수 만들 수 있다.
# def sumvalue2(*b):  #(a, *b):
#     print("a: ", a)
#     print("b :", b)

# sumvalue2(x)  #x는 앞의 것 a받아주고 비어있는 것은 *b로 처리 
# sumvalue2(10,x)                   #한 방에 받으려면 *b로 하면 됨 
#리스트와 튜플의 차이점 : 튜플은 수정불가, 데이터 저장이나 수정으로 인해 넉넉하게 공간 할당>>> 리스트
#처음부터 공간 최적화 : set과 튜플 


def show_info(*args): #(**p)
    print("b :", b)
    
    
    sumbalue2(x)
print("--------------------------------------------------")
def show_info2(**kwargs):  #받아서 출력한 것을 
    for kw, arg in kwargs.items(): #kwargs.items받아서 kw와 arg에 할당 
        print(kw, " : ", arg, sep = '')

# show_info(p)
# show_info2({'age' :30, 'name': "홍길동"}


show_info(name = '홍길동')
show_info2(**p)


        #

            #선언가능  #변수이름: args많이 씀 

    #**p는 keyword argument라고 이름을 잘 지음. 

#dic으로 처리하면 dic으로 받아서 처리