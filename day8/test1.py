

keyword = "오늘은 비가 언제까지 올까요?".split() #해서 가져올 수 있음 
#원래 공백을 기준으로 가져오는 것임. #먼저 split으로 끊어서 가져오기 
print(keyword, type(keyword)) #이렇게 하면 리스트가 됨. 
#리스트로 만들어서 리스트 내포 표현식으로 간단하게 표현할 수 있다. 
#각 단어가 몇 글자인지 알아내기 

#리스트 표현식 (아래 )

print({len(word) for word in keyword}) #해서 가져옴.  set임을 알 수 있음. 중복값이 사라짐. 
#해서 공백을 기준으로 가져오기 
#3자 이상만 선택해서 

print({len(word) for word in keyword if len(word)>3}) #조건을 써줄 수 있음. 
print("------------------------------------------------------------------------")
# dictionary Compresion

countrys = {"한국" : "서울", "일본":"도쿄", "중국": "북경", "UAE":"아부다비"}

#키만 출력 

capital = {country: capital for country, capital in countrys.items()} #두 개를 받아서 앞의 것과 그 뒤의 것을 줘요. 
print(capital) #갸져온 값을 for 뒤에서 가져온값 앞으로 넣어줌. 키벨류를 가지고 옴 in 앞에  

#for 키와 벨류 가지고 와서 for뒤에 있는 것을 for 앞쪽으로 가지고와줌.. 뽑을 때 for 앞으로 country, capital해 for 뒤에 있는 counrty capital을 
#  

# a = 10 #a변수 당음    
# def prt():
#     print(a) #여기까지 정의만 해줌   

# prt() #여기서 실행 
# a = 10 #a변수 당음 #전역변수라고 함  --- 누구나 알 수있는 것 어디서나 다 알 수 있는 것 
# def prt():
#     b = 20   #지역변수라고 함.  --- local지역만 아는 #함수안 쪽에 선언되어있는 변수 함수 내에서 변수가 뭐지 아는데 밖에서는 모름. 
#     print(a)
#     #print(b) #b라는 변수값을 출력하려고요  

# prt()   #실행한 순간에만 짠 했다가 사라짐 prt가 호출되면 서브 다른 메모리에서 처리하고 사라짐 
#print(b)
#지역변수는 외부지역에서는 쓸 수 없음. 


# b를 a라고 하려고요 밑과 같이 
# a = 10 #a변수 당음 #전역변수라고 함  --- 누구나 알 수있는 것 어디서나 다 알 수 있는 것 
# def prt():
#     a = 20   #지역변수라고 함.  --- local지역만 아는 #함수안 쪽에 선언되어있는 변수 함수 내에서 변수가 뭐지 아는데 밖에서는 모름. 
#     print(a)#지역변수로 출력됨 
# #지역
# prt()  #지역변수에 있는 것을 사용 


# a = 10 #a변수 당음 #전역변수라고 함  --- 누구나 알 수있는 것 어디서나 다 알 수 있는 것 
# def prt():
#     global a #a라고 하면 전역변수야 
#     a = 20  #전역변수a에 20을 담어--- 전역 변수 a에 20을 대입  
#        #지역변수라고 함.  --- local지역만 아는 #함수안 쪽에 선언되어있는 변수 함수 내에서 변수가 뭐지 아는데 밖에서는 모름. 
#     print(a)#지역변수로 출력됨 
# #지역
# prt()  #이거 실행하고 끝남  그래서 이거 20됨. 
# print(a) #20됨 


a = 10 
def prt():
    global a #a라고 하면 전역변수야 
    a = 20
    b = 100   
    print(a)
    print(locals()) #지역변수들이 뭐가 있는지 알 수 있음. 열어보고 쓰지는 않지만 목록으로 볼 수 있음.  
    print(a)
prt()
print("-------------------전역변수 영역--------------------------------------")
print(locals()) 
print(a)
#지역
#a는 20으로 바뀐 것 볼 수 있고 print(locals)로 지역변수 볼 수 있음 
#지역변수와 전역변수있을 때 다르게 짓는게 제일 좋음--- 쓰면 대게 헷갈림 


def sayHello():
    msg = "니하오" #함수 안에 다른 함수 들어갈 수 있음 
    def prt(): 
    #다른 함수 안에 다른 함수 : 중첩되었다 네스티드 fuction이라고 함. 
        print(msg) #함수가 끝나기전에 써야 사용 가능  #지역변수는 안의 것의 변수를 가져다 쓸 수 있고 안의 변수는 외부에서 쓸 수 없음. 
    prt()
sayHello() #

print("--------------------------------------------------------------------")
# def f1():
#     a = 10 #f1의 지역변수 a
#     def f2(): #f1안에 있는 중복함수 f2
#         a = 20 #f2의 지역변수 b   
# #같은 이름 썼다고 해보자 
#     f2()  #안의 def 실행됨    #다 실행하고 끝남 f2는 끝나도 사라짐 
#     print(a)#그리고 나서 print a하면 10

# f1()


#왜10 gkatnrk dlTdmaus gkatn tlfgod cjfl ndlgks a20 함수 지역변수 사라짐 


def f1():
    a = 10 #f1의 지역변수 a
    def f2(): 
        nonlocal a #f1안에 있는 중복함수 f2
        a = 20 #f2의 지역변수 b   
#같은 이름 썼다고 해보자 
    f2() #얘는 없어짐 
    
    print(a) #그리곡 밖의 a가 20이라고 했으니까 20으로 출력 

f1()


#함수가 밖에 있을 때 전역되는 a가 됨  global 하면 함수의 아예 밖에 있는 애 됨. nonlocal있는 데 쓰면 
#이제부터 쓰는 a는 바로 밖에 있는 함수 전역이 아니라 