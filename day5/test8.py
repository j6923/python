'''
 함수는 여러개의 실행문을 하나의 묶음으로 만든 실행단위 
 내장함수 : 설치 후에 포함되어 있는 함수 
 사용자 정의 함수 : 만들어쓰는 함수 
 '''



 #*
 #**
 #***
 #****
 #*****


 #사용자 저의 함수 
#  def 함수명():
#         문장    
#         문장
#        [return 반환값] #있을 수도 있고 없을 수도 있고 
# def printstar(): #별칭 줌, 너 이런 이름 가져 너 이런 이름 자주 부르기(쓸거기) 때문에 , 명칭 줌 def정의함 이런 이름 함수는 (), ()는 함수에 대한 정의 ,,,  
#     for n in range(1,6):
#         print("*"*n)        #"*"*3은 "*" 곱하기 3 --->이것을 n번 *n함 
#     #3번 반복하고 싶어요.             
#  #나중에 이 이름 가진애는 여기 까지야 
#     #return 반환값 
#     #나를 부른 애한테 이걸 줘, 반환값 


# printstar() #괄호 열고 닫고까지 해야 그걸 실행해 'def 이름명'이면 별칭 줌,, def ():있으면 함수명임. 
# printstar()
# printstar()
# #하다가 함수 코드 끝나면 다시 옴, 이런애 3번했네 눈에 보임. 
#반복 값 range숫자랑 연관 

def printstar(num):  #전def prinstar() #실행할 때 나에게 숫자주면 거기다 전달해서 실행시킬게.   
    #num = 10                #매게 변수 : 실행하는 프롬과 미리정해놓은 함수의 매게체 역할을 하는 변수 
    for n in range(1,num):   #자주 바뀌는 부분 변수주면 됨. 
        print("*"*n)   


printstar(3)  #3값을 넘버에 담아  3줄로 찍어 
printstar(5)#5줄 짜리로 찍어, 실행하는순간 전달 
printstar(7)# 7줄짜리로 찍어 


#이름만 알고 실행해라 --- 거북이도 매게변수 

#구구단 3단 출력 
# def gugudan():
#     print("-------------------------------------------------------")
#     for i in range(1,10):
#         print(" 3 * ", i , " = ", 3*i) 

# gugudan(2)  #2단 출력 
# gugudan(7)
# gugudan(9)

def gugudan(dan):
    print("-------------------------------------------------------")
    for i in range(1,10):
        print(str(dan), " * ", i , " = ", dan*i)   #장점 : 분업가능 

gugudan(2)  #2단 출력  #실행하고 다시 돌아옴(나를 불렀던 애한테), 그리고 함수가 호출하면 하고 불렀던 애한테 돌아감 
gugudan(7)
gugudan(9)

#1부터 지정한 숫자까지 누적된 값을 출력하는 함수  #42번 틀릴 수도 있고 42번 위가 틀려서 42번 틀린 걸로 나올 수 있음. 
#에러 책 한 권 발간하고 그 다음에 씀. 
def hap(num):  #변수이름은 짓는 사람마음대로  
    value = 0
    print("합 함수내부고드 :" + str(num))
    for i in range(num+1):
        value += i
    print("1부터 " +str(num) + "까지의 합은" + str(value))
    return value #날 출력한 애한테 보내줘  return하고 그 값 줌   
    #지금 계산한 값을 날 호출(실행)한 코드에 전달하고 싶다.  #출력하면 출력할 때만 나중에도 값을 구할 때 쓰고 싶어요. 매게변수받듯 보내고 싶어
    #보내는 키워드가 return value
    print("하하하하하하하하하하하") #노란색 : 원인 == 이거는 문법상틀리지 않았는데 왜 쓰지? 굳이 왜 이렇게.... dead code 라고 함  #실행될 일이 없는 코드 
print(hap(100)) #이름의 함수 값을 지워버리고 그 자리에 써 버림 hap(100)지우고 덮어씀 #return value 이 값 전달하고 나는 끝

#리턴 만나면 그 밑 코드 모두 무시 

x = hap(50)  #
y = hap(100) #얻어진 결과 갖고 옴 누적값을 리턴 

#누적하는 로직 할 필요없이 밑의 것으로 값 불러올 수 있음 
print(x+y)

#odd(숫자) 1부터 해당 숫자까지 홀수의 누적합을 구하는 함수  1, 3, 5, 7, 
# a = odd(100)
# b = odd(30)
def odd(num):
    value = 0
    for i in range(1,num +1):
        if i%2 == 1:
            value += i
    print(value)
    return value
print("--------------------------------------------------------")
a = odd(8)
b = odd(4)

print(a + b)  
#i%3은 3의 배수 

def odd(num,no): #앞에 주는 것은 앞에 뒤에 오는 것은 뒤에, 매게 변수는 여러개 가져올 수 있어요. 구분위해 콤마, 
    value = 0
    for i in range(1,num+1):
        if i%no == 0:  #확정적이지 않아요, 변수를 씀 3으로 나눈 나머지 i%3== 0  3의 배수... 확정적이지 않아서 no를 씀. 
            value += i
    print(value)
    return value

print("--------------------------------------------------")
a = odd(8,2)    #8은 num에 전달 , 2는 no에 전달 하겠다. 
b = odd(9,3)
print(a)
print(b)
#print(hap(100,200))
#print(minus(200,100))
#print(multi(200,3))
#print(div(200,3))


